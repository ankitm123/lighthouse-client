apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  creationTimestamp: null
  name: cheese
spec:
  pipelineSpec:
    params:
      - default: param-value
        name: PARAM
        type: string
      - description: the unique build number
        name: BUILD_ID
        type: string
      - description: the name of the job which is the trigger context name
        name: JOB_NAME
        type: string
      - description: the specification of the job
        name: JOB_SPEC
        type: string
      - description: '''the kind of job: postsubmit or presubmit'''
        name: JOB_TYPE
        type: string
      - description: the base git reference of the pull request
        name: PULL_BASE_REF
        type: string
      - description: the git sha of the base of the pull request
        name: PULL_BASE_SHA
        type: string
      - default: ""
        description: git pull request number
        name: PULL_NUMBER
        type: string
      - default: ""
        description: git pull request ref in the form 'refs/pull/$PULL_NUMBER/head'
        name: PULL_PULL_REF
        type: string
      - default: ""
        description: git revision to checkout (branch, tag, sha, ref…)
        name: PULL_PULL_SHA
        type: string
      - description: git pull reference strings of base and latest in the form 'master:$PULL_BASE_SHA,$PULL_NUMBER:$PULL_PULL_SHA:refs/pull/$PULL_NUMBER/head'
        name: PULL_REFS
        type: string
      - description: git repository name
        name: REPO_NAME
        type: string
      - description: git repository owner (user or organisation)
        name: REPO_OWNER
        type: string
      - description: git url to clone
        name: REPO_URL
        type: string
    tasks:
      - name: cheese
        params:
          - name: PARAM
            value: $(params.PARAM)
          - name: BUILD_ID
            value: $(params.BUILD_ID)
          - name: JOB_NAME
            value: $(params.JOB_NAME)
          - name: JOB_SPEC
            value: $(params.JOB_SPEC)
          - name: JOB_TYPE
            value: $(params.JOB_TYPE)
          - name: PULL_BASE_REF
            value: $(params.PULL_BASE_REF)
          - name: PULL_BASE_SHA
            value: $(params.PULL_BASE_SHA)
          - name: PULL_NUMBER
            value: $(params.PULL_NUMBER)
          - name: PULL_PULL_REF
            value: $(params.PULL_PULL_REF)
          - name: PULL_PULL_SHA
            value: $(params.PULL_PULL_SHA)
          - name: PULL_REFS
            value: $(params.PULL_REFS)
          - name: REPO_NAME
            value: $(params.REPO_NAME)
          - name: REPO_OWNER
            value: $(params.REPO_OWNER)
          - name: REPO_URL
            value: $(params.REPO_URL)
        taskSpec:
          metadata: {}
          params:
            - default: param-value
              name: PARAM
              type: string
            - description: the unique build number
              name: BUILD_ID
              type: string
            - description: the name of the job which is the trigger context name
              name: JOB_NAME
              type: string
            - description: the specification of the job
              name: JOB_SPEC
              type: string
            - description: '''the kind of job: postsubmit or presubmit'''
              name: JOB_TYPE
              type: string
            - description: the base git reference of the pull request
              name: PULL_BASE_REF
              type: string
            - description: the git sha of the base of the pull request
              name: PULL_BASE_SHA
              type: string
            - default: ""
              description: git pull request number
              name: PULL_NUMBER
              type: string
            - default: ""
              description: git pull request ref in the form 'refs/pull/$PULL_NUMBER/head'
              name: PULL_PULL_REF
              type: string
            - default: ""
              description: git revision to checkout (branch, tag, sha, ref…)
              name: PULL_PULL_SHA
              type: string
            - description: git pull reference strings of base and latest in the form 'master:$PULL_BASE_SHA,$PULL_NUMBER:$PULL_PULL_SHA:refs/pull/$PULL_NUMBER/head'
              name: PULL_REFS
              type: string
            - description: git repository name
              name: REPO_NAME
              type: string
            - description: git repository owner (user or organisation)
              name: REPO_OWNER
              type: string
            - description: git url to clone
              name: REPO_URL
              type: string
          spec: null
          stepTemplate:
            computeResources: {}
            env:
              - name: BUILD_ID
                value: $(params.BUILD_ID)
              - name: JOB_NAME
                value: $(params.JOB_NAME)
              - name: JOB_SPEC
                value: $(params.JOB_SPEC)
              - name: JOB_TYPE
                value: $(params.JOB_TYPE)
              - name: PULL_BASE_REF
                value: $(params.PULL_BASE_REF)
              - name: PULL_BASE_SHA
                value: $(params.PULL_BASE_SHA)
              - name: PULL_NUMBER
                value: $(params.PULL_NUMBER)
              - name: PULL_PULL_REF
                value: $(params.PULL_PULL_REF)
              - name: PULL_PULL_SHA
                value: $(params.PULL_PULL_SHA)
              - name: PULL_REFS
                value: $(params.PULL_REFS)
              - name: REPO_NAME
                value: $(params.REPO_NAME)
              - name: REPO_OWNER
                value: $(params.REPO_OWNER)
              - name: REPO_URL
                value: $(params.REPO_URL)
          steps:
            - computeResources: {}
              image: ubuntu
              name: noshebang
              script: echo "no shebang"
            - computeResources: {}
              env:
                - name: FOO
                  value: foooooooo
              image: ubuntu
              name: bash
              script: |
                #!/usr/bin/env bash
                set -euxo pipefail
                echo "Hello from Bash!"
                echo FOO is ${FOO}
                echo substring is ${FOO:2:4}
                for i in {1..10}; do
                  echo line $i
                done
            - computeResources: {}
              image: ubuntu
              name: place-file
              script: |
                #!/usr/bin/env bash
                echo "echo Hello from script file" > /workspace/hello
                chmod +x /workspace/hello
            - computeResources: {}
              image: ubuntu
              name: run-file
              script: |
                #!/usr/bin/env bash
                /workspace/hello
            - computeResources: {}
              image: ubuntu
              name: contains-eof
              script: |
                #!/usr/bin/env bash
                cat > file << EOF
                this file has some contents
                EOF
                cat file
            - computeResources: {}
              image: node
              name: node
              script: |
                #!/usr/bin/env node
                console.log("Hello from Node!")
            - computeResources: {}
              image: python
              name: python
              script: |
                #!/usr/bin/env python3
                print("Hello from Python!")
            - computeResources: {}
              image: perl
              name: perl
              script: |
                #!/usr/bin/perl
                print "Hello from Perl!"
            - computeResources: {}
              image: python
              name: params-applied
              script: |
                #!/usr/bin/env python3
                v = '$(params.PARAM)'
                if v != 'param-value':
                  print('Param values not applied')
                  print('Got: ', v)
                  exit(1)
            - args:
                - hello
                - world
              computeResources: {}
              image: ubuntu
              name: args-allowed
              script: |-
                #!/usr/bin/env bash
                [[ $# == 2 ]]
                [[ $1 == "hello" ]]
                [[ $2 == "world" ]]
  taskRunTemplate: {}
  timeouts:
    pipeline: 24h0m0s
status: {}
