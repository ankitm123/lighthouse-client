apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  creationTimestamp: null
spec:
  pipelineSpec:
    params:
    - description: the unique build number
      name: BUILD_ID
      type: string
    - description: the name of the job which is the trigger context name
      name: JOB_NAME
      type: string
    - description: the specification of the job
      name: JOB_SPEC
      type: string
    - description: '''the kind of job: postsubmit or presubmit'''
      name: JOB_TYPE
      type: string
    - description: the base git reference of the pull request
      name: PULL_BASE_REF
      type: string
    - description: the git sha of the base of the pull request
      name: PULL_BASE_SHA
      type: string
    - default: ""
      description: git pull request number
      name: PULL_NUMBER
      type: string
    - default: ""
      description: git pull request ref in the form 'refs/pull/$PULL_NUMBER/head'
      name: PULL_PULL_REF
      type: string
    - default: ""
      description: git revision to checkout (branch, tag, sha, ref…)
      name: PULL_PULL_SHA
      type: string
    - description: git pull reference strings of base and latest in the form 'master:$PULL_BASE_SHA,$PULL_NUMBER:$PULL_PULL_SHA:refs/pull/$PULL_NUMBER/head'
      name: PULL_REFS
      type: string
    - description: git repository name
      name: REPO_NAME
      type: string
    - description: git repository owner (user or organisation)
      name: REPO_OWNER
      type: string
    - description: git url to clone
      name: REPO_URL
      type: string
    tasks:
    - name: from-build-pack
      params:
      - name: BUILD_ID
        value: $(params.BUILD_ID)
      - name: JOB_NAME
        value: $(params.JOB_NAME)
      - name: JOB_SPEC
        value: $(params.JOB_SPEC)
      - name: JOB_TYPE
        value: $(params.JOB_TYPE)
      - name: PULL_BASE_REF
        value: $(params.PULL_BASE_REF)
      - name: PULL_BASE_SHA
        value: $(params.PULL_BASE_SHA)
      - name: PULL_NUMBER
        value: $(params.PULL_NUMBER)
      - name: PULL_PULL_REF
        value: $(params.PULL_PULL_REF)
      - name: PULL_PULL_SHA
        value: $(params.PULL_PULL_SHA)
      - name: PULL_REFS
        value: $(params.PULL_REFS)
      - name: REPO_NAME
        value: $(params.REPO_NAME)
      - name: REPO_OWNER
        value: $(params.REPO_OWNER)
      - name: REPO_URL
        value: $(params.REPO_URL)
      taskSpec:
        description: |-
          These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.
          The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param.
        metadata: {}
        params:
        - description: git url to clone
          name: url
          type: string
        - default: ""
          description: git revision to checkout (branch, tag, sha, ref…)
          name: revision
          type: string
        - default: ""
          description: (optional) git refspec to fetch before checking out revision
          name: refspec
        - default: "true"
          description: defines if the resource should initialize and fetch the submodules
          name: submodules
          type: string
        - default: "1"
          description: performs a shallow clone where only the most recent commit(s) will be fetched
          name: depth
          type: string
        - default: "true"
          description: defines if http.sslVerify should be set to true or false in the global git config
          name: sslVerify
          type: string
        - default: ""
          description: subdirectory inside the "output" workspace to clone the git repo into
          name: subdirectory
          type: string
        - default: "true"
          description: clean out the contents of the repo's destination directory (if it already exists) before trying to clone the repo there
          name: deleteExisting
          type: string
        - default: ""
          description: git HTTP proxy server for non-SSL requests
          name: httpProxy
          type: string
        - default: ""
          description: git HTTPS proxy server for SSL requests
          name: httpsProxy
          type: string
        - default: ""
          description: git no proxy - opt out of proxying HTTP/HTTPS requests
          name: noProxy
          type: string
        - default: "true"
          description: log the commands used during execution
          name: verbose
          type: string
        - default: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.18.1
          description: the image used where the git-init binary is
          name: gitInitImage
          type: string
        - description: the unique build number
          name: BUILD_ID
          type: string
        - description: the name of the job which is the trigger context name
          name: JOB_NAME
          type: string
        - description: the specification of the job
          name: JOB_SPEC
          type: string
        - description: '''the kind of job: postsubmit or presubmit'''
          name: JOB_TYPE
          type: string
        - description: the base git reference of the pull request
          name: PULL_BASE_REF
          type: string
        - description: the git sha of the base of the pull request
          name: PULL_BASE_SHA
          type: string
        - default: ""
          description: git pull request number
          name: PULL_NUMBER
          type: string
        - default: ""
          description: git pull request ref in the form 'refs/pull/$PULL_NUMBER/head'
          name: PULL_PULL_REF
          type: string
        - default: ""
          description: git revision to checkout (branch, tag, sha, ref…)
          name: PULL_PULL_SHA
          type: string
        - description: git pull reference strings of base and latest in the form 'master:$PULL_BASE_SHA,$PULL_NUMBER:$PULL_PULL_SHA:refs/pull/$PULL_NUMBER/head'
          name: PULL_REFS
          type: string
        - description: git repository name
          name: REPO_NAME
          type: string
        - description: git repository owner (user or organisation)
          name: REPO_OWNER
          type: string
        - description: git url to clone
          name: REPO_URL
          type: string
        results:
        - description: The precise commit SHA that was fetched by this Task
          name: commit
        - description: The precise URL that was fetched by this Task
          name: url
        stepTemplate:
          env:
          - name: BUILD_ID
            value: $(params.BUILD_ID)
          - name: JOB_NAME
            value: $(params.JOB_NAME)
          - name: JOB_SPEC
            value: $(params.JOB_SPEC)
          - name: JOB_TYPE
            value: $(params.JOB_TYPE)
          - name: PULL_BASE_REF
            value: $(params.PULL_BASE_REF)
          - name: PULL_BASE_SHA
            value: $(params.PULL_BASE_SHA)
          - name: PULL_NUMBER
            value: $(params.PULL_NUMBER)
          - name: PULL_PULL_REF
            value: $(params.PULL_PULL_REF)
          - name: PULL_PULL_SHA
            value: $(params.PULL_PULL_SHA)
          - name: PULL_REFS
            value: $(params.PULL_REFS)
          - name: REPO_NAME
            value: $(params.REPO_NAME)
          - name: REPO_OWNER
            value: $(params.REPO_OWNER)
          - name: REPO_URL
            value: $(params.REPO_URL)
          name: ""
          resources: {}
        steps:
        - image: $(params.gitInitImage)
          name: clone
          resources: {}
          script: |
            #!/bin/sh
            set -eu -o pipefail

            if [[ "$(params.verbose)" == "true" ]] ; then
              set -x
            fi

            CHECKOUT_DIR="$(workspaces.output.path)/$(params.subdirectory)"

            cleandir() {
              # Delete any existing contents of the repo directory if it exists.
              #
              # We don't just "rm -rf $CHECKOUT_DIR" because $CHECKOUT_DIR might be "/"
              # or the root of a mounted volume.
              if [[ -d "$CHECKOUT_DIR" ]] ; then
                # Delete non-hidden files and directories
                rm -rf "$CHECKOUT_DIR"/*
                # Delete files and directories starting with . but excluding ..
                rm -rf "$CHECKOUT_DIR"/.[!.]*
                # Delete files and directories starting with .. plus any other character
                rm -rf "$CHECKOUT_DIR"/..?*
              fi
            }

            if [[ "$(params.deleteExisting)" == "true" ]] ; then
              cleandir
            fi

            test -z "$(params.httpProxy)" || export HTTP_PROXY=$(params.httpProxy)
            test -z "$(params.httpsProxy)" || export HTTPS_PROXY=$(params.httpsProxy)
            test -z "$(params.noProxy)" || export NO_PROXY=$(params.noProxy)

            /ko-app/git-init \
              -url "$(params.url)" \
              -revision "$(params.revision)" \
              -refspec "$(params.refspec)" \
              -path "$CHECKOUT_DIR" \
              -sslVerify="$(params.sslVerify)" \
              -submodules="$(params.submodules)" \
              -depth "$(params.depth)"
            cd "$CHECKOUT_DIR"
            RESULT_SHA="$(git rev-parse HEAD)"
            EXIT_CODE="$?"
            if [ "$EXIT_CODE" != 0 ] ; then
              exit $EXIT_CODE
            fi
            # ensure we don't add a trailing newline to the result
            echo -n "$RESULT_SHA" > $(results.commit.path)
            echo -n "$(params.url)" > $(results.url.path)
        - name: jx-variables
          resources: {}
        - name: build-npm-install
          resources: {}
        - name: build-npm-test
          resources: {}
        - name: build-container-build
          resources: {}
        - name: promote-jx-preview
          resources: {}
        workspaces:
        - description: The git repo will be cloned onto the volume backing this workspace
          name: output
status: {}
